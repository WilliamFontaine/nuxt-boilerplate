import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const seedPosts = [
  {
    title: 'Introduction au d√©veloppement Nuxt 4',
    content:
      'Nuxt 4 apporte de nombreuses am√©liorations par rapport aux versions pr√©c√©dentes. Dans cet article, nous explorerons les nouvelles fonctionnalit√©s comme la compilation plus rapide, les performances am√©lior√©es et la meilleure int√©gration TypeScript. Nous verrons √©galement comment migrer vos projets existants vers cette nouvelle version majeure.'
  },
  {
    title: 'Guide complet de Vue.js Composition API',
    content:
      'La Composition API est devenue la m√©thode recommand√©e pour d√©velopper avec Vue.js. Elle offre une meilleure r√©utilisabilit√© du code, une logique plus organis√©e et un support TypeScript am√©lior√©. Ce guide couvre les concepts fondamentaux comme ref, reactive, computed et watch, avec des exemples pratiques.'
  },
  {
    title: 'Optimisation des performances web en 2024',
    content:
      'Les performances web sont cruciales pour l\'exp√©rience utilisateur et le SEO. Cet article explore les techniques modernes d\'optimisation : lazy loading, tree shaking, code splitting, optimisation des images, mise en cache efficace et mesure des Core Web Vitals. Des conseils pratiques pour am√©liorer votre score PageSpeed.'
  },
  {
    title: 'TypeScript : Types avanc√©s et bonnes pratiques',
    content:
      'TypeScript offre un syst√®me de types puissant qui va bien au-del√† des types primitifs. D√©couvrez les types utilitaires, les types g√©n√©riques, les types conditionnels, l\'inf√©rence de type et les techniques avanc√©es pour cr√©er des APIs type-safe et maintenables.'
  },
  {
    title: 'Architecture moderne avec Pinia',
    content:
      'Pinia est le nouveau standard pour la gestion d\'√©tat dans Vue.js. Plus simple et plus performant que Vuex, il offre une API intuitive, un excellent support TypeScript et des devtools int√©gr√©s. Ce guide couvre la cr√©ation de stores, la persistance et les bonnes pratiques.'
  },
  {
    title: 'S√©curit√© des applications web modernes',
    content:
      'La s√©curit√© web √©volue constamment avec de nouvelles menaces et solutions. Cet article couvre les vuln√©rabilit√©s courantes (XSS, CSRF, injection SQL), les headers de s√©curit√© essentiels, l\'authentification moderne (JWT, OAuth2) et les bonnes pratiques de s√©curisation des APIs.'
  },
  {
    title: 'Tests automatis√©s avec Vitest et Playwright',
    content:
      'Une strat√©gie de test solide est essentielle pour maintenir la qualit√© du code. D√©couvrez comment mettre en place des tests unitaires avec Vitest, des tests d\'int√©gration et des tests E2E avec Playwright. Techniques de mocking, coverage et int√©gration CI/CD.'
  },
  {
    title: 'D√©ploiement et DevOps pour d√©veloppeurs frontend',
    content:
      'Le d√©ploiement moderne va au-del√† du simple upload FTP. Explorez Docker, les pipelines CI/CD avec GitHub Actions, le d√©ploiement automatis√©, la surveillance des applications et les strat√©gies de rollback. Un guide pratique pour passer en production sereinement.'
  },
  {
    title: 'Design System et composants r√©utilisables',
    content:
      'Un design system coh√©rent am√©liore l\'exp√©rience utilisateur et acc√©l√®re le d√©veloppement. Apprenez √† cr√©er des composants Vue.js r√©utilisables, √† organiser votre syst√®me de design, √† documenter vos composants et √† maintenir la coh√©rence visuelle √† grande √©chelle.'
  },
  {
    title: 'Progressive Web Apps (PWA) avec Nuxt',
    content:
      'Les PWA combinent le meilleur du web et du mobile. D√©couvrez comment transformer votre application Nuxt en PWA : service workers, mise en cache avanc√©e, fonctionnement hors ligne, notifications push et installation sur l\'√©cran d\'accueil. L\'avenir du web mobile.'
  }
]

async function main() {
  // eslint-disable-next-line no-console
  console.log('üå± D√©but du seeding de la base de donn√©es...')

  // Nettoyer les donn√©es existantes
  await prisma.post.deleteMany()
  // eslint-disable-next-line no-console
  console.log('‚úÖ Donn√©es existantes supprim√©es')

  // Cr√©er les nouveaux posts
  for (const post of seedPosts) {
    await prisma.post.create({
      data: post
    })
  }

  // eslint-disable-next-line no-console
  console.log(`‚úÖ ${seedPosts.length} articles de test cr√©√©s`)
  // eslint-disable-next-line no-console
  console.log('üéâ Seeding termin√© avec succ√®s !')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erreur lors du seeding :', e)
    await prisma.$disconnect()
    process.exit(1)
  })
