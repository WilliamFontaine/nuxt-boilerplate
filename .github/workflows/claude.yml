name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Project commands from CLAUDE.md
          allowed_tools: 'Bash(npm install),Bash(npm run dev),Bash(npm run build),Bash(npm run lint),Bash(npm run test:*),Bash(docker compose up -d),Bash(npx prisma migrate dev),Bash(npm run db:*)'

          # Nuxt 4 project-specific instructions
          custom_instructions: |
            **PROJECT CONTEXT**: Nuxt 4 boilerplate with TypeScript, Nuxt UI, Prisma ORM, PostgreSQL
            **ESSENTIAL COMMANDS**: npm run dev, build, test, lint, db operations via Docker
            **CODE STANDARDS**: Follow CLAUDE.md patterns - single quotes, no semicolons, 2-space indentation
            **AUTO-IMPORTS**:
            ⚠️ CRITICAL: DO NOT flag missing imports - Nuxt 4 auto-imports everything from:
            - Vue/Nuxt built-ins: ref, computed, reactive, watch, useI18n, $fetch, defineModel, etc.
            - Components: All files from ~/components/ directory (auto-imported by default)
            - Custom client-side imports (configured in nuxt.config.ts):
              • shared/** - All shared utilities, types, models (Post, ApiResponse, etc.)
              • composables/** - All composables (usePostForm, useNotifications, usePreferences, etc.)
            - Custom server-side imports (configured in nitro.imports):
              • shared/** - Shared utilities accessible in API routes
              • server/constants/** - Server constants and configurations
              • server/validations/** - Validation schemas (createPostSchema, updatePostSchema, etc.)
            - Pinia stores: usePreferencesStore and store composables

            When reviewing code, NEVER suggest adding import statements for these configured directories.
            **ARCHITECTURE**:
            - Use Prisma singleton pattern (import prisma from '@@/lib/prisma')
            - RESTful APIs with consistent { statusCode, data } response format
            - Vue 3 Composition API preferred over Options API
            - Form validation with Yup schemas and i18n integration
            - Shared utilities auto-imported from shared/ directory
            **EXPERT AGENTS**: Leverage specialized agents for frontend, backend, database, testing, devops
            **TESTING**: Write Vitest unit tests and Playwright E2E tests for new features
            **CONVENTIONS**: Conventional commits, TypeScript strict mode, accessibility considerations

          # Development environment variables
          claude_env: |
            NODE_ENV: development
            TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/test_database
